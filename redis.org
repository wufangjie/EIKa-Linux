* useful
|                  | return                              |          |
|------------------+-------------------------------------+----------|
| KEYS *           | lst                                 | wildcard |
| TYPE key         | none, string, list, set, hash, zset |          |
| HELP cmd         |                                     | *        |
| RENAME key1 key2 | OK                                  |          |
| RENAMENX         | 0/1                                 |          |

|                  | return  |                                  |
|------------------+---------+----------------------------------|
| EXPIRE keky sec  | 0/1     |                                  |
| TTL              | -2/-1/s | get the *time to live* for a key |
| PEXPIRE mill_sec | 0/1     |                                  |
NOTE: set will reset expire time

** ttl
return values:
+ -2: means no such value or expired
+ -1: means no time limit
+ n: means left n secs

** try redis online
https://try.redis.io

* string
|                     | return     |                                 |
|---------------------+------------+---------------------------------|
| SET key val         | OK         |                                 |
| GET key             | val        |                                 |
| DEL key             | 0/1        |                                 |
| EXISTS key          | 0/1        |                                 |
| GETSET key val      | origin val |                                 |
| MGET                | multi get  |                                 |
| MSET                | multi set  |                                 |
| SETNX               |            | set if not exist                |
| SETEX key *sec val* | OK         | *atomic* == set key val ex sec? |
| MSETNX              | 0/1        | *atomic*, multi set not exist   |

|                 |                                |
|-----------------+--------------------------------|
| DECR key        | non existing key, default to 0 |
| DECRBY key [-]n |                                |
| INCR key        |                                |
| INCRBY key [-]n |                                |

* list
|                       | return |                         |
|-----------------------+--------+-------------------------|
| LLEN key              | len    |                         |
| LPOP key              | val    | left                    |
| LPUSH key val ..      | len    |                         |
| LRANGE key lo [-]hi   | lst    | include hi lst[lo..=hi] |
| LREM key [-]count val | 0/1    | remove O(n)             |
| RPOP key              | val    |                         |
| RPUSH key val ..      | len    |                         |
| RPOPLPUSH key1 key2   | val    |                         |
| LINDEX key i          | val    |                         |
| LSET key i val        | OK     |                         |
| LTRIM key lo hi       | OK     | only keep lst[lo..=hi]  |

** lrem key [-]count val
remove at most abs(`count`) of element which have value `val`
negative: means from right to left
return real removed count

* set
|                            | return |                                   |
|----------------------------+--------+-----------------------------------|
| SADD key val ..            | 0/1    | 0: already in side                |
| SISMEMBER key val          | 0/1    |                                   |
| SPOP key [n]               |        |                                   |
| SREM key val               | 0/1    | remove                            |
| SMEMBERS key               |        | all items                         |
| SRANDMEMBER [n]            |        | -n means allow repeating          |
| SDIFF key1 key2 ..         |        | set difference                    |
| SINTER key1 key2 ..        |        | set intersection                  |
| SUNION key1 key2 ..        |        | non existing set considered empty |
| SDIFFSTORE dstkey          |        | set dstkey (sdiff ..)             |
| SINTERSTORE                |        |                                   |
| SUNIONSTORE                |        |                                   |
| SMOVE srckey dstkey member | 0/1    | *atomic* source -> destination    |
| SCARD                      | len    | candinality                       |

* zset (sorted set)
|                                    | return |             |
|------------------------------------+--------+-------------|
| ZADD key score val                 | 0/1    |             |
| ZRANGE key lo -hi [WITHSCORES]     | lst    | idx         |
| ZREVRANGE                          |        | reverse     |
| ZRANGEBYSCORE min max [WITHSCORES] |        | [min, max]  |
| ZRANK key val                      | rank   | 0-indexed   |
| ZSCORE key val                     | score  |             |
| ZREM key val                       | 0/1    |             |
| ZINCRBY key delta val              | score  |             |
| ZREMRANGEBYSCORE key min max       | n      |             |
| ZCARD                              | len    | candinality |
| ZCOUNT min max                     | n      |             |

** 说明
1. 值不能重复, score 可以相同 (所以它不是一个有序字典)
2. 默认是从小到大的, 加 REV 则是从大到小, zrange VS zrevrange
3. zrange 是按 score 排名区间取 key, zrangebyscore 是按 score 大小区间取 key
4. 上面两个命令可以加 withscores, 返回时会带上 score
5. zrank 获取某个 key 的 rank

NOTE: score must be number (for comparision)

** 用途
1. 某段事件的排行榜: key 为时间段, val 为要排名的对象, score 为排名依据
2. 用户访问限流: key 为用户, val 和 score 均为时间戳

* hash
|                        | return |                  |
|------------------------+--------+------------------|
| HSET dct key val       | 0/1    |                  |
| HGET dct key           | val    |                  |
| HINCRBY dct key [-n]   | val    |                  |
| HDEL dct key           | 0/1    |                  |
| HGETALL dct            | lst    | [key1, val1, ..] |
| HEXISTS dct key        | 0/1    |                  |
| HKEYS dct              | lst    | [key1, key2, ..] |
| HVALS dct              | lst    | [val1, val2, ..] |
| HLEN dct               | len    |                  |
| HMSET dct key val ..   | OK     | hash multi set   |
| HMGET dct key1 key2 .. | lst    | hash multi get   |

* advanced
** transaction block
MULTI
cmd1 (return QUEUED)
cmd2
...
cmdn
EXEC (or DISCARD)

** SORT
sort key [By pattern] [LIMIT start count] [ASC|DESC] [ALPHA] [STORE dstkey]

NOTE: default asc, by number (use alpha -> alphabets)

by prefix_*_suffix (the key's value)
get prefix_*_suffix

** scan

* start/stop
#+BEGIN_SRC sh
sudo service redis start
sudo service redis stop
sudo service redis restart
redis-cli
#+END_SRC

* 消息队列的三种实现
https://zhuanlan.zhihu.com/p/344269737

** list
通过 lpush/rpop, rpush/lpop 实现即时消费

*** block (降低 cpu 消耗, 不一一直去请求)
| BLPOP key timeout | b means block until lst have an element or timeout |
| BRPOP key timeout | timeout = 0 means no timeout                       |

*** rpoplpush (rpop lpush)
val = rpop lst1
then lpush lst2 val
return val

lst1 and lst2 can be same lst

lst2 可用作消息队列的确认

** publish/subscribe
一个客户端 subscribe channel_name 会阻塞接收消息
别的客户端 publish channel_name some_message
第一个客户端会收到:
#+BEGIN_EXAMPLE
1) "message"
2) "channel_name"
3) "hello"
#+END_EXAMPLE

psubscribe means pattern subscribe (wildcard)

| UNSUBSCRIBE  | 退定 |
| PUNSUBSCRIBE |      |

缺点:
+ 消息无法持久化，如果出现网络断开、Redis 宕机等，消息就会被丢弃。
+ 没有 Ack 机制来保证数据的可靠性

** streams (为消息队列设计, 可持久化, 有 ack)
尾部添加 ID 越来越大的消息

#+BEGIN_SRC redis
127.0.0.1:6379> xadd mystream * f1 v1 f2 v2 f3 v3
"1646273397048-0"
127.0.0.1:6379> xadd mystream * f4 v4
#+END_SRC

星号表示自动生成 (毫秒时间戳-该毫秒内产生的第几条消息(递增))

#+BEGIN_SRC redis
xrange mystream - +
xlen mystream
xdel mystream 1646273397048-0
del mystream
#+END_SRC

符号 - + 分别表示最小, 最大消息ID
xdel 返回 0/1

*** consumer group
#+BEGIN_SRC redis
127.0.0.1:6379> xgroup create mystream mygroup1 $
127.0.0.1:6379> xinfo stream mystream
127.0.0.1:6379> xinfo groups mystream
127.0.0.1:6379> xadd mystream * f5 v5
127.0.0.1:6379> xreadgroup group mygroup1 c1 count 1 streams mystream >
127.0.0.1:6379> xinfo groups mystream
127.0.0.1:6379> xack mystream mygroup1 1646274873017-0
127.0.0.1:6379> xinfo groups mystream
#+END_SRC

xreadgroup 会把本组 last-delivered-id 推进一个
xack 会把 pending 编程 ack 的
