* 说明
** 关键字大写
本来关键字要, 不过打起字来确实不舒服, 就没用

** 有重做价值的题: 9, 14, 15, 16, 34, 35

** 来源
https://github.com/spareribs/DA_Mysql_DataForg/tree/master/docs

* 准备
** student
#+BEGIN_SRC sql
CREATE TABLE `student`(
  `s_id` int,
  `s_name` varchar(10),
  `s_birth` date,  -- datetime
  `s_sex` char(1),
  PRIMARY KEY (`s_id`)
) Engine=MyISAM;

INSERT INTO student VALUES
(1, '赵雷', '1990-01-01', '男'),
(2, '钱电', '1990-12-21', '男'),
(3, '孙风', '1990-05-20', '男'),
(4, '李云', '1990-08-06', '男'),
(5, '周梅', '1991-12-01', '女'),
(6, '吴兰', '1992-03-01', '女'),
(7, '郑竹', '1989-07-01', '女'),
(8, '王菊', '1990-01-20', '女');
#+END_SRC

** course
#+BEGIN_SRC sql
CREATE TABLE `course`(
  `c_id` smallint,
  `c_name` varchar(10),
  `t_id` int,
  PRIMARY KEY (`c_id`)
) Engine=MyISAM;

INSERT INTO course VALUES
(1, '语文', 2),
(2, '数学', 1),
(3, '英语', 3);
#+END_SRC

** teacher
#+BEGIN_SRC sql
CREATE TABLE `teacher`(
  `t_id` int,
  `t_name` varchar(10),
  PRIMARY KEY (`t_id`)
) Engine=MyISAM;

INSERT INTO teacher VALUES
(1, '张三'),
(2, '李四'),
(3, '王五');
#+END_SRC

** sc
#+BEGIN_SRC sql
CREATE TABLE `sc`(
  `s_id` int,
  `c_id` smallint,
  `score` decimal(4, 1),
  PRIMARY KEY (`s_id`, `c_id`)
) Engine=MyISAM;

INSERT INTO sc VALUES
(1, 1, 80),
(1, 2, 90),
(1, 3, 99),
(2, 1, 70),
(2, 2, 60),
(2, 3, 80),
(3, 1, 80),
(3, 2, 80),
(3, 3, 80),
(4, 1, 50),
(4, 2, 30),
(4, 3, 20),
(5, 1, 76),
(5, 2, 87),
(6, 1, 31),
(6, 3, 34),
(7, 2, 89),
(7, 3, 98);
#+END_SRC

* 1 查询" 01 "课程比" 02 "课程成绩高的学生的信息及课程分数
#+BEGIN_SRC sql
select t1.s_id, student.s_name, t1.score, t2.score
from (select s_id, score from sc where c_id = 1) t1
join (select s_id, score from sc where c_id = 2) t2
on t1.s_id = t2.s_id
join student
on t1.s_id = student.s_id
where t1.score > t2.score;
#+END_SRC
** 1.1 查询同时存在" 01 "课程和" 02 "课程的情况
#+BEGIN_SRC sql
select t1.s_id, t1.score, t2.score
from (select s_id, score from sc where c_id = 1) t1
join (select s_id, score from sc where c_id = 2) t2
on t1.s_id = t2.s_id;
#+END_SRC

** 1.2 查询存在" 01 "课程但可能不存在" 02 "课程的情况(不存在时显示为 null )
#+BEGIN_SRC sql
select t1.s_id, t1.score, t2.score
from (select s_id, score from sc where c_id = 1) t1
left join (select s_id, score from sc where c_id = 2) t2
on t1.s_id = t2.s_id;
#+END_SRC

** 1.3 查询不存在" 01 "课程但存在" 02 "课程的情况
#+BEGIN_SRC sql
select *
from sc
where c_id = 2 and s_id not in (select s_id from sc where c_id = 1);
#+END_SRC

* 2 查询平均成绩大于等于 60 分的同学的学生编号和学生姓名和平均成绩
#+BEGIN_SRC sql
select t1.s_id, student.s_name, t1.avg_score
from (select s_id, avg(score) as avg_score
      from sc
      group by s_id
      having avg_score >= 60) t1
join student
on t1.s_id = student.s_id;
#+END_SRC
或
#+BEGIN_SRC sql
select sc.s_id, student.s_name, avg(score) as avg_score
from sc
join student
on sc.s_id = student.s_id
group by sc.s_id
having avg_score >= 60;
#+END_SRC

* 3 查询在 SC 表存在成绩的学生信息
#+BEGIN_SRC sql
select student.*
from student
join (select distinct s_id from sc) t
on student.s_id = t.s_id;
#+END_SRC

* 4 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩(没成绩的显示为 null )
#+BEGIN_SRC sql
select student.s_id, s_name, c_count, s_score
from student
left join (select s_id, count(*) as c_count, sum(score) as s_score
           from sc
           group by s_id) t
on student.s_id = t.s_id;
#+END_SRC

** 4.1 查有成绩的学生信息
#+BEGIN_SRC sql
select student.*
from student
join (select distinct s_id from sc where score is not null) t
on student.s_id = t.s_id;
#+END_SRC

* 5 查询「李」姓老师的数量
#+BEGIN_SRC sql
select count(*)
from teacher
where t_name like "李%";
#+END_SRC

* 6 查询学过「张三」老师授课的同学的信息
不要太多子查询
#+BEGIN_SRC sql
select student.*
from student
join sc
on student.s_id = sc.s_id
where sc.c_id in (select c_id
                  from course, teacher
                  where course.t_id = teacher.t_id and teacher.t_name = "张三");
#+END_SRC

* 7 查询没有学全所有课程的同学的信息
#+BEGIN_SRC sql
select *
from student
where s_id not in (select s_id
                   from sc
		   group by s_id
                   having count(*) = (select count(*) from course));

#+END_SRC
或
#+BEGIN_SRC sql
select s.s_id, s.s_name
from student s
left join sc on s.s_id = sc.s_id
group by s.s_id
having count(*) < (select count(*) from course);
#+END_SRC

* 8 查询至少有一门课与学号为" 01 "的同学所学相同的同学的信息
#+BEGIN_SRC sql
select *
from student
where s_id in (select distinct s_id
               from sc
	       where c_id in (select c_id from sc where s_id = 1));
#+END_SRC

* 9 查询和" 01 "号的同学学习的课程 完全相同的其他同学的信息
以下实现, 没有去除
NOTE: 用 group_concat,
#+BEGIN_SRC sql
select *
from student t
where s_id <> 1
  and exists (
    select 1
    from sc
    where sc.s_id = t.s_id
    having count(*) = (select count(c_id) from sc where s_id = 1))
  and not exists (
    select 1
    from sc
    where sc.s_id = t.s_id and c_id not in (select c_id from sc where s_id = 1));
#+END_SRC

#+BEGIN_SRC sql
select *
from student t
where s_id <> 1 and s_id in (
  select s_id
  from sc
  group by s_id
  having group_concat(c_id) = (select group_concat(c_id)
                               from sc
                               where s_id = 1));
#+END_SRC

* 10 查询没学过"张三"老师讲授的任一门课程的学生姓名
#+BEGIN_SRC sql
select student.s_name
from student
where not exists (select 1
                 from course, teacher, sc
                 where sc.s_id = student.s_id
		       and sc.c_id = course.c_id
                       and course.t_id = teacher.t_id
                       and teacher.t_name = "张三");
#+END_SRC

* 11 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩
#+BEGIN_SRC sql
select t1.s_id, s_name, avg_score
from student t1, (select s_id, avg(score) as avg_score from sc group by s_id) t2
where t1.s_id = t2.s_id and t1.s_id in (
  select s_id
  from sc
  where score < 60
  group by s_id
  having count(*) > 1
);
#+END_SRC

* 12 检索" 01 "课程分数小于 60，按分数降序排列的学生信息
#+BEGIN_SRC sql
select student.*
from (select s_id
      from sc
      where c_id = 1 and score < 60
      order by score desc) t
left join student
on t.s_id = student.s_id;
#+END_SRC
以上实现不保证顺序, 用下面这个

#+BEGIN_SRC sql
select student.*
from student
join (select s_id, score
      from sc
      where c_id = 1 and score < 60) t
on student.s_id = t.s_id
order by t.score desc;
#+END_SRC

* 13 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩
#+BEGIN_SRC sql
select sc.*, avg_score
from sc
left join (select s_id, avg(score) as avg_score
           from sc
           group by s_id) t
on sc.s_id = t.s_id
order by avg_score desc;
#+END_SRC

* 14 查询各科成绩最高分、最低分和平均分：以如下形式显示：
课程 ID，课程 name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率
及格为>=60，
中等为：70-80，
优良为：80-90，
优秀为：>=90
要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列

#+BEGIN_SRC sql
select
  sc.c_id `课程 ID`,
  c_name `课程 name`,
  max(score) 最高分,
  min(score) 最低分,
  avg(score) 平均分,
  count(*) 选修人数,
  (sum(if(score >= 60, 1, 0)) / count(*)) 及格率,
  (sum(if(score >= 70 and score < 80, 1, 0)) / count(*)) 中等率,
  (sum(if(score >= 80 and score < 90, 1, 0)) / count(*)) 优良率,
  (sum(if(score >= 90, 1, 0)) / count(*)) 优秀率
from sc
left join course
on sc.c_id = course.c_id
group by sc.c_id
order by 选修人数 desc, sc.c_id;
#+END_SRC

* 15 按各科成绩进行排序，并显示排名， Score 重复时保留名次空缺
#+BEGIN_SRC sql
select t1.c_id, t1.s_id, t1.score, count(t2.score) + 1 as s_rank
from sc t1
left join sc t2
on t1.c_id = t2.c_id and t1.score < t2.score
group by t1.c_id, t1.s_id
order by t1.c_id, s_rank;
#+END_SRC

NOTE1: count(t2.score) 用来去除 null
NOTE2: rank 貌似变成了 mysql 的关键字, 不能 as rank

** 15.1 按各科成绩进行排序，并显示排名， Score 重复时合并名次
#+BEGIN_SRC sql
select t1.c_id, t1.s_id, t1.score, count(distinct t2.score) + 1 as s_rank
from sc t1
left join sc t2
on t1.c_id = t2.c_id and t1.score < t2.score
group by t1.c_id, t1.s_id
order by t1.c_id, s_rank;
#+END_SRC

* 16 查询学生的总成绩，并进行排名，总分重复时保留名次空缺
#+BEGIN_SRC sql
select t1.s_id, t1.total, count(t2.total) + 1
from (select s_id, sum(score) total
      from sc
      group by s_id) t1
left join (select s_id, sum(score) total
           from sc
	   group by s_id) t2
on t1.total < t2.total
group by t1.s_id, t1.total;
#+END_SRC

** 开窗函数 (mysql 8.0+) + 子查询
#+BEGIN_SRC sql
select t.*, rank() over (order by t.score desc)
from (select s_id, sum(score) score
      from sc
      group by s_id) t;
#+END_SRC

** 开窗函数 + 聚合
over 内的语句执行再 group by 之后
#+BEGIN_SRC sql
select s_id, sum(score), rank() over (order by sum(score) desc)
from sc
group by s_id;
#+END_SRC

** 16.1 (dense_rank)
#+BEGIN_SRC sql
select t1.s_id, t1.total, count(distinct t2.total) + 1
from (select s_id, sum(score) total
      from sc
      group by s_id) t1
left join (select s_id, sum(score) total
           from sc
	   group by s_id) t2
on t1.total < t2.total
group by t1.s_id, t1.total
#+END_SRC

* 17 统计各科成绩各分数段人数：课程编号，课程名称，[100-85]，[85-70]，[70-60]，[60-0] 及所占百分比
#+BEGIN_SRC sql
select sc.c_id, course.c_name,
  sum(if(score >= 85, 1, 0)) `C[100-85]`,
  sum(if(score >= 85, 1, 0)) / count(*) `P[100-85]`,
  sum(if(score >= 70 and score < 85, 1, 0)) `C[85-70]`,
  sum(if(score >= 70 and score < 85, 1, 0)) / count(*) `P[85-70]`,
  sum(if(score >= 60 and score < 70, 1, 0)) `C[70-60]`,
  sum(if(score >= 60 and score < 70, 1, 0)) / count(*) `P[70-60]`,
  sum(if(score < 60, 1, 0)) `C[60-0]`,
  sum(if(score < 60, 1, 0)) / count(*) `P[60-0]`
from sc
left join course
on sc.c_id = course.c_id
group by c_id;
#+END_SRC

* 18 查询各科成绩前三名的记录
#+BEGIN_SRC sql
select t.*
from (select c_id, s_id, score, rank() over (partition by c_id order by score desc) as s_rank from sc) t
where t.s_rank < 4;
#+END_SRC

* 19 查询每门课程被选修的学生数
#+BEGIN_SRC sql
select c_id, count(s_id)
from sc
group by c_id;
#+END_SRC

* 20 查询出只选修两门课程的学生学号和姓名
#+BEGIN_SRC sql
select s_id, s_name
from student
where s_id in (select s_id
               from sc
	       group by s_id
	       having count(*) = 2);
#+END_SRC

* 21 查询男生、女生人数
#+BEGIN_SRC sql
select s_sex, count(*)
from student
group by s_sex;
#+END_SRC

* 22 查询名字中含有「风」字的学生信息
#+BEGIN_SRC sql
select *
from student
where s_name like "%风%";
#+END_SRC

* 23 查询同名同性(?)学生名单，并统计同名人数
#+BEGIN_SRC sql
select s_name, s_sex, count(*) as num
from student
group by s_name, s_sex
having num > 1;
#+END_SRC

* 24 查询 1990 年出生的学生名单
#+BEGIN_SRC sql
select *
from student
where year(s_birth) = 1990;
#+END_SRC

* 25 查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列
#+BEGIN_SRC sql
select c_id, avg(score) as avg_score
from sc
group by c_id
order by avg_score desc, c_id;
#+END_SRC

* 26 查询平均成绩大于等于 85 的所有学生的学号、姓名和平均成绩
#+BEGIN_SRC sql
select t1.*, t2.avg_score
from student t1
right join (select s_id, avg(score) as avg_score
            from sc
	    group by s_id
	    having avg_score >= 85) t2
on t1.s_id = t2.s_id;
#+END_SRC

* 27 查询课程名称为「数学」，且分数低于 60 的学生姓名和分数
#+BEGIN_SRC sql
select t.s_name, sc.score
from sc, student t
where score < 60 and t.s_id = sc.s_id and c_id in (select c_id from course where c_name = "数学");
#+END_SRC

#+BEGIN_SRC sql
select t1.s_name, sc.score
from sc, student t1, course t2
where score < 60 and t1.s_id = sc.s_id and sc.c_id = t2.c_id and t2.c_name = "数学";
#+END_SRC

* 28 查询所有学生的课程及分数情况（存在学生没成绩，没选课的情况）
#+BEGIN_SRC sql
select t.s_id, t.s_name, sc.c_id, sc.score
from student t
left join sc
on t.s_id = sc.s_id;
#+END_SRC

* 29 查询任何一门课程成绩在 70 分以上的姓名、课程名称和分数
#+BEGIN_SRC sql
select s_name, c_name, score
from sc, student, course
where sc.s_id = student.s_id and sc.c_id = course.c_id and exists (
    select 1
    from sc
    where s_id = student.s_id and score >= 70);
#+END_SRC

#+BEGIN_SRC sql
select s_name, c_name, score
from sc, student, course
where sc.s_id = student.s_id and sc.c_id = course.c_id and sc.s_id in (
    select s_id
    from sc
    group by s_id
    having max(score >= 70));
#+END_SRC

* 30 查询不及格的课程?
#+BEGIN_SRC sql
select *
from course
where c_id in (select c_id
               from sc
	       group by c_id
	       having min(score) < 60);
#+END_SRC

* 31 查询课程编号为 01 且课程成绩在 80 分以上的学生的学号和姓名
#+BEGIN_SRC sql
select s_id, s_name
from student
where s_id in (select s_id
               from sc
	       where c_id = 1 and score >= 80);
#+END_SRC

* 32 求每门课程的学生人数
#+BEGIN_SRC sql
select c_id, count(*)
from sc
group by c_id;
#+END_SRC

* 33 成绩不重复，查询选修「张三」老师所授课程的学生中，成绩最高的学生信息及其成绩
#+BEGIN_SRC sql
select student.*, score
from student
right join (select s_id, score
            from teacher, course, sc
	    where t_name = "张三"
                  and teacher.t_id = course.t_id
                  and course.c_id = sc.c_id
	    order by score desc
	    limit 0,1) t
on student.s_id = t.s_id;
#+END_SRC

* 34 成绩有重复的情况下，查询选修「张三」老师所授课程的学生中，成绩最高的学生信息及其成绩
join + on s_rank = 1
#+BEGIN_SRC sql
select student.*, score
from student
right join (select s_id, score, rank() over(order by score desc) as s_rank
      from teacher, course, sc
      where t_name = "张三"
            and teacher.t_id = course.t_id
	    and course.c_id = sc.c_id) t
on student.s_id = t.s_id
where s_rank = 1;
#+END_SRC

* 35 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩
有两种理解: 一是同一学生不同课程, 成绩有相同
#+BEGIN_SRC sql
select *
from sc
where s_id in (select s_id
               from sc
	       group by s_id
	       having count(*) <> count(distinct score));
#+END_SRC
上述做法不能去除有些唯一的课程, 以下做法更好
#+BEGIN_SRC sql
select distinct t1.*
from sc t1
left join sc t2
on t1.s_id = t2.s_id and t1.c_id <> t2.c_id
where t1.score = t2.score;
#+END_SRC

二是对于各课程, 有成绩相同的学生的情况
#+BEGIN_SRC sql
select s_id, c_id, score
from sc
where (c_id, score) in (select c_id, score
                        from sc
			group by c_id, score
			having count(*) > 1);
#+END_SRC

* 36 查询每门功成绩最好的前两名
#+BEGIN_SRC sql
select *
from (select c_id, s_id, rank() over(partition by c_id order by score desc) as s_rank from sc) t
where s_rank < 3;
#+END_SRC

* 37 统计每门课程的学生选修人数（超过 5 人的课程才统计）
#+BEGIN_SRC sql
select c_id, count(*) as num
from sc
group by c_id
having num > 5;
#+END_SRC

* 38 检索至少选修两门课程的学生学号
#+BEGIN_SRC sql
select s_id
from sc
group by s_id
having count(*) > 1;
#+END_SRC

* 39 查询选修了全部课程的学生信息
#+BEGIN_SRC sql
select *
from student
where s_id in (select s_id
               from sc
	       group by s_id
	       having count(*) = (select count(*) from course));
#+END_SRC

* 40 查询各学生的年龄，只按年份来算
#+BEGIN_SRC sql
select s_id, s_name, year(now()) - year(s_birth) as age, s_sex
from student;
#+END_SRC

* 41 按照出生日期来算，当前月日 < 出生年月的月日则，年龄减一
#+BEGIN_SRC sql
select s_id, s_name, year(now()) - year(s_birth) + if(month(now())*100+day(now()) < month(s_birth)*100+day(s_birth), -1, 0) as age, s_sex
from student;
#+END_SRC

* 42 查询生日
** 42.1 查询本周过生日的学生
#+BEGIN_SRC sql
select *
from student
where weekofyear(now()) = weekofyear(s_birth);
#+END_SRC

** 42.2 查询下周过生日的学生
#+BEGIN_SRC sql
select *
from student
where weekofyear(date_add(now(), interval 7 day)) = weekofyear(s_birth);
#+END_SRC

** 42.3 查询本月过生日的学生
#+BEGIN_SRC sql
select *
from student
where month(now()) = month(s_birth);
#+END_SRC

** 42.4 查询下月过生日的学生
#+BEGIN_SRC sql
select *
from student
where month(date_add(now(), interval 1 month)) = month(s_birth);
#+END_SRC
